[{"title":"Learn Lightning Web Components — Part 1. 简介","url":"/2019/08/16/LWC-Part1/","content":"\n[官网文档最为致命-传送门](https://developer.salesforce.com/docs/component-library) \n\n## LWC 支持的SF特性及工具\n\n* Lightning Experience\n* Salesforce App\n* Lightning Communities\n* Lightning App Builder\n* Community Builder\n* Standalone Apps\n* Lightning Components for Visualforce\n* Lightning Out (beta)\n* First-Generation Managed Packages\n* Second-Generation Managed Packages\n* Unlocked Packages\n* Unmanaged Packages\n* Change Sets\n* Metadata API—LightningComponentBundle\n* Tooling API—LightningComponentBundle, LightningComponentResource\n* EMP API\n* Embedded Service Chat\n* Gmail and Outlook integration\n\n## LWC 不支持的SF特性及工具\n\n* Salesforce Console (Navigation Item API, Workspace API, UtilityBar API)\n* Utility Bars\n* URL Addressable Tabs\n* Flows\n* Conversation Toolkit API, Omni Toolkit API, Quick Action API\n* Standard Action Overrides, Custom Actions, Global Actions, List View Actions, Related List View Actions\n* Chatter Extensions\n\n## Component Library for your org\n\nhttps://<myDomain>.lightning.force.com/docs/component-library \n\n## 创建组件\n\n### 1.组件的目录结构:\n&emsp;&emsp;myComponent\n&emsp;&emsp;├──myComponent.html\n&emsp;&emsp;├──myComponent.js\n&emsp;&emsp;├──myComponent.js-meta.xml\n&emsp;&emsp;├──myComponent.css\n&emsp;&emsp;└──myComponent.svg\n\n### 2.组件引入其他模块\n&emsp;&emsp;这里使用的ES6的import命令, 语言规格层面支持模块功能。支持编译时静态分析，便于JS引入宏和类型检验。动态绑定。\n&emsp;&emsp;当我们想引用一个sf内置模块(这里我们尝试调用加载资源模块):\n```\nimport { moduleName } from 'lightning/platformResourceLoader'\n```\n&emsp;&emsp;LWC其实算是变向的回归传统开发模式，所以在做LWC开发的时候我们不会局限于像Aura CMP固定的文件目录，\n&emsp;&emsp;我们在组建下创建自己的工具类文件等等(当然从某种角度来说Aura开发模式也可以引用自己写好的工具类zzz)\n&emsp;&emsp;这里我们引用组件下子文件夹的模块:\n```\nimport { moduleName } from './myComponentLib/utilities.js'\n```\n\n### 3.组件引用组件\n&emsp;&emsp;官方: \"Camel case names (myComponent) map to kebab case (my-component) in HTML\"\n&emsp;&emsp;第一眼看到这里, 我觉得这点跟Vue很相似(Vue如果没定义暴漏出来的name的话)。上代码:\n```\n<-- app.html -->\n<template>\n    <c-my-component></c-my-component>\n</template>\n```\n\n## 声明符\n\n@api\n\n相当于是java class里面的public属性(对外开放，比如父组件传值)\n如何向子组件传值(也遵循驼峰命名规则):\n```\n<template>\n  <c-hello-world first-name=\"World\"></c-hello-world>\n</template>\n```\n\n@track\n\n相当于是private属性\n\n@wire\n\n是用于连接server的，适应于查询数据，不能做其他的dml操作\n\n## 总结\n其实今天写的文章主要就是按照自己的理解翻译一下官方指南, 自己也在学习中... 勿喷\n\n\n\n\n\n\n\n\n\n\n"},{"title":"Hi Alv1n","url":"/2019/07/26/Hello Alv1n/","content":"&emsp;  2019年对我来说是一个无论从工作环境还是从工作地位都发生了很大变化的一年。首先是在四月份结束了在深圳华为为期半年的出差生活,这半年对我来说也是意义非凡(后面我会讲述一些);另一方面从华为回来后被领导安排到公司的RDC协助同事培训新一批JTP(没想到我这一瓶不满半瓶逛荡的渣渣也开始带实习生了, 每每想起这就特别怀念当初我实习被我追着问问题的那些前辈)。\n\n## HUAWEI  出差的半年\n\n- __项目方面__\n    因为HW的安全性要求很高, 再加上我们公司是与HW刚合作不久, 所以项目上要求我们必须onsite(驻场)。来这之前满腔热血, 希望自己能在这个项目上锻炼锻炼。早有听闻996, 现实这个项目也确实是----9/11/6。 其实对于我来说这些倒也还好, 毕竟年轻身体还扛得住。我的目的还是希望能通过这个项目拓展一下眼界以及提高一下自身水平吧。这里有两位Leader带着我们一起熬一起通宵上线, 虽然自己对自己这半年的表现一直觉得差强人意, 但还是有收获: 收获知识, 收获真挚的革命友谊。\n\n## HUAWEI  出差结束的几个月\n\n- __工作环境__\n    这里的工作环境是我去年新入职的公司与Capgemini(中国)合并了, 所以我在不到一年的时间内相当月换了两家公司(- -)。其实也没什么大的变化，周围还都是这些人。 由于合并后我的老大就负责了昆山这边的RDC(远程交付中心), 恰巧我离的近也就自然而然地被安排到这边来带\n    JTP(就是实习生吧我认为), 其实自始至终我始终觉得我自己还是个需要学习的孩子, 对带他们这件事我一直是自我否定的, 奈何老板发话岂敢不从。既来之则安之, 对于他们我都是倾囊相授的, 在我还是信任的时候我的前辈们对我都很有耐心, 为我解决我的很多大问题小问题还包括很多脑残的问题。所以很快我就和他们打成一片～～～\n\n## 总结\n\n- __对自己的一些祝福__\n    开这个博客的原因就是希望能记录自己的生活还有多歇歇技术相关的博客。\n    最后希望自己能把握住人生中每一个机会, 希望自己能完成自己的每一个目标, 希望自己永远保持热爱,永远善良&#10084;\n","tags":["123456"]},{"title":"Hello World","url":"/2019/07/26/hello-world/","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n"}]